import streamlit as st
import pandas as pd
from app.utils import load_data
from app.figures import plot_product_graph
from src.graphes import build_graph_cooccurrence, compute_louvain_communities

st.set_page_config(page_title="ğŸ”— Analyse Graphe", page_icon="ğŸ”—")
st.title("ğŸ”— Analyse par Graphes")

st.markdown(
    "Cette page utilise des reprÃ©sentations en **graphe** pour explorer les comportements d'achat :\n"
    "- Quelles familles de produits sont frÃ©quemment achetÃ©es ensemble ?\n"
    "- Peut-on dÃ©tecter des regroupements naturels dans les ventes ?"
)

# Chargement des donnÃ©es
df = load_data()

# Choix du type de graphe
graph_type = st.radio(
    "Type de graphe Ã  visualiser :",
    ["Graphe de co-achats entre produits", "RÃ©seau biparti client-produit"]
)

# === GRAPHE DE CO-ACHATS ===
if graph_type == "Graphe de co-achats entre produits":

    st.markdown("ğŸ’¡ Mode : **Top 30 produits les plus vendus**, arÃªtes pour co-achats frÃ©quents")

    # Filtrage des produits les plus vendus
    top_products = (
        df["product_label"]
        .value_counts()
        .head(30)
        .index
        .tolist()
    )
    df_top = df[df["product_label"].isin(top_products)]

    # Construction du graphe
    G = build_graph_cooccurrence(df_top, min_edge_weight=20)

    # Bouton Louvain
    color_map = None
    if st.button("ğŸ§© DÃ©tecter les communautÃ©s (Louvain)"):
        communities = compute_louvain_communities(G)
        color_map = {}
        for i, com in enumerate(communities):
            for node in com:
                color_map[node] = i

    # Affichage du graphe (avec ou sans couleur)
    fig = plot_product_graph(G, color_map=color_map)
    st.plotly_chart(fig, use_container_width=True)

    st.markdown(
        "ğŸ“Œ *Chaque nÅ“ud reprÃ©sente un produit. Deux produits sont reliÃ©s s'ils ont Ã©tÃ© achetÃ©s ensemble plusieurs fois.*\n"
        "Cela permet de repÃ©rer des combinaisons frÃ©quentes ou des logiques de placement produit."
    )
